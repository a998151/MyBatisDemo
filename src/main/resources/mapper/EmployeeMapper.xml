<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--选择工作区，如果为接口代理查询，则要填入接口的全类名-->
<!-- id 和 JavaMapper 接口中的方法名字相同，则实现方法绑定 -->
<mapper namespace="mybatis.dao.EmployeeMapper">

    <select id="selectEmp" resultType="Employee">
        SELECT * FROM tbl_employee WHERE id = #{id}
    </select>

    <!--设置为一标示，动态接口代理查询时候，可以填入接口方法名-->
    <!--配对好返回类型。之前在全局配置文件中设置过别名处理，所以此处直接填写别名就行，不用填全类名-->
    <!--#{id} 表示从传过来的参数中取出 id 的值-->
    <select id="getEmployeeById" resultType="Employee">
        SELECT * FROM tbl_employee WHERE id = #{id}
    </select>

    <!--多参数-->
    <select id="getEmployeeByIdAndLastName" resultType="Employee">
        SELECT * FROM tbl_employee WHERE id=#{id} AND last_name=#{lastName}
    </select>
    <select id="getEmployeeByMap" resultType="Employee">
        SELECT * FROM tbl_employee WHERE id=#{id} AND last_name=#{lastName}
    </select>


    <!--插入数据-->
    <!--keyProperty 对应JavaBean 的主键值-->
    <insert id="addEmp" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tbl_employee(last_name,gender,email) VALUES (#{lastName},#{gender},#{email})
    </insert>

    <!--更新数据-->
    <update id="updateEmp">
        UPDATE tbl_employee SET last_name=#{lastName},gender=#{gender},email=#{email} WHERE id = #{id}
    </update>

    <!--删除数据-->
    <delete id="deleteEmpById">
        DELETE FROM tbl_employee WHERE id = #{id}
    </delete>


    <!--获取结果集-->
    <!--返回结果如果是结果集，要写集合里面的具体类型-->
    <select id="getEmpByLastName" resultType="Employee">
        SELECT * FROM tbl_employee WHERE last_name LIKE #{lastName}
    </select>

    <!--返回结果是结果集，用 Map 包装-->
    <select id="getEmpByLastNameLikeReturnMap" resultType="Employee">
        SELECT * FROM tbl_employee WHERE last_name LIKE  #{lastName}
    </select>
</mapper>